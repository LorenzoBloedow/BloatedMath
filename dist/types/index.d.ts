export default class BloatedMath {
    constructor();
    static PI: number;
    static BIG_PI: number;
    static PHI: number;
    static BIG_PHI: number;
    static SILVER_RATIO: number;
    static BIG_SILVER_RATIO: number;
    static SQUARE_ROOT_OF_2: number;
    static BIG_SQUARE_ROOT_OF_2: number;
    static PYTHAGORAS_CONSTANT: number;
    static BIG_PYTHAGORAS_CONSTANT: number;
    static SQUARE_ROOT_OF_3: number;
    static BIG_SQUARE_ROOT_OF_3: number;
    static THEODORUS_CONSTANT: number;
    static BIG_THEODORUS_CONSTANT: number;
    static SQUARE_ROOT_OF_5: number;
    static BIG_SQUARE_ROOT_OF_5: number;
    static CUBE_ROOT_OF_2: number;
    static BIG_CUBE_ROOT_OF_2: number;
    static TWELFTH_ROOT_OF_2: number;
    static BIG_TWELFTH_ROOT_OF_2: number;
    static SUPERGOLDEN_RATIO: number;
    static BIG_SUPERGOLDEN_RATIO: number;
    static KEPLER_BOUWKAMP_CONSTANT: number;
    static BIG_KEPLER_BOUWKAMP_CONSTANT: number;
    static WALLIS_CONSTANT: number;
    static BIG_WALLIS_CONSTANT: number;
    static EULER_NUMBER: number;
    static BIG_EULER_NUMBER: number;
    static NATURAL_LOGARITHM_OF_2: number;
    static BIG_NATURAL_LOGARITHM_OF_2: number;
    static LEMNISCATE_CONSTANT: number;
    static BIG_LEMNISCATE_CONSTANT: number;
    static EULER_CONSTANT: number;
    static BIG_EULER_CONSTANT: number;
    static OMEGA_CONSTANT: number;
    static BIG_OMEGA_CONSTANT: number;
    static CONWAY_CONSTANT: number;
    static BIG_CONWAY_CONSTANT: number;
    static APERY_CONSTANT: number;
    static BIG_APERY_CONSTANT: number;
    static UNIVERSAL_PARABOLIC_CONSTANT: number;
    static BIG_UNIVERSAL_PARABOLIC_CONSTANT: number;
    static CONNECTIVE_CONSTANT: number;
    static BIG_CONNECTIVE_CONSTANT: number;
    static LAPLACE_LIMIT: number;
    static BIG_LAPLACE_LIMIT: number;
    static RAMANUJAN_SOLDNER_CONSTANT: number;
    static BIG_RAMANUJAN_SOLDNER_CONSTANT: number;
    static GLAISHER_KINKELIN_CONSTANT: number;
    static BIG_GLAISHER_KINKELIN_CONSTANT: number;
    static CATALAN_CONSTANT: number;
    static BIG_CATALAN_CONSTANT: number;
    static DOTTIE_NUMBER: number;
    static BIG_DOTTIE_NUMBER: number;
    static MEISSEL_MERTENS_CONSTANT: number;
    static BIG_MEISSEL_MERTENS_CONSTANT: number;
    static GOLDEN_ANGLE: number;
    static BIG_GOLDEN_ANGLE: number;
    static PLASTIC_NUMBER: number;
    static BIG_PLASTIC_NUMBER: number;
    static FEIGENBAUM_CONSTANT: number;
    static BIG_FEIGENBAUM_CONSTANT: number;
    static FRANSEN_ROBINSON_CONSTANT: number;
    static BIG_FRANSEN_ROBINSON_CONSTANT: number;
    static WEIERSTRASS_CONSTANT: number;
    static BIG_WEIERSTRASS_CONSTANT: number;
    static ROBBINS_CONSTANT: number;
    static BIG_ROBBINS_CONSTANT: number;
    static DEVICCI_TESSERACT_CONSTANT: number;
    static BIG_DEVICCI_TESSERACT_CONSTANT: number;
    static LOCHS_CONSTANT: number;
    static BIG_LOCHS_CONSTANT: number;
    static PORTER_CONSTANT: number;
    static BIG_PORTER_CONSTANT: number;
    static MAGIC_ANGLE: number;
    static BIG_MAGIC_ANGLE: number;
    static isPrime(n: number): boolean;
    static isComposite(n: number): boolean;
    static isOdd(n: number): boolean;
    static isEven(n: number): boolean;
    static parity(n: number): string;
    static divisorCount(n: number): number;
    static isHighlyComposite(n: number): boolean;
    static divisors(n: number): number[];
    static multiples(n: number, amount: number): number[];
    static fibonacciSequence(n: number): number[];
    static isFibonacciNumber(n: number): boolean;
    static greatestCommonDivisor(numbers: number[]): number | null | undefined;
    static leastCommonMultiple(numbers: number[]): number | null;
    static recamanSequence(n: number): number | number[] | null;
    static circleArea(radius: number): number | null;
    static quadraticFormula(a: number, b: number, c: number): number[] | number | null | undefined;
    static lazyCaterer(n: number, mode?: string): number | number[] | null;
    static lookAndSaySequence(n: number): number[] | number | null;
    static average(numbers: number[]): number | null;
}
//# sourceMappingURL=index.d.ts.map